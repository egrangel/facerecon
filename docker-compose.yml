version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: facial_recognition_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: facial_recognition_db
      POSTGRES_USER: facial_user
      POSTGRES_PASSWORD: facial_pass123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U facial_user -d facial_recognition_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: facial_recognition_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: facial_recognition_api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      API_VERSION: v1
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: facial_user
      DB_PASSWORD: facial_pass123
      DB_DATABASE: facial_recognition_db
      
      # JWT
      JWT_SECRET: your_super_secret_jwt_key_change_in_production
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_SECRET: your_refresh_token_secret_here
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Security
      BCRYPT_ROUNDS: 12
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      
      # Features
      SWAGGER_ENABLED: true
      
      # CORS
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001,http://192.168.1.2:3000,http://192.168.1.2:3001,http://177.72.43.247:3000,http://177.72.43.247:3001
      CORS_CREDENTIALS: true
      
      # Logging
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
    networks:
      - facial_recognition_network

  # Nginx (Load Balancer/Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: facial_recognition_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - facial_recognition_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  facial_recognition_network:
    driver: bridge